// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js 필수 테이블들
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // 관계
  accounts             Account[]
  sessions             Session[]
  voiceEntries         VoiceEntry[]
  goals                Goal[]
  tokenUsages          TokenUsage[]
  notificationSettings NotificationSettings?
  notificationLogs     NotificationLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Voice Journal 애플리케이션 테이블들
model VoiceEntry {
  id            String     @id @default(cuid())
  userId        String     @map("user_id")
  type          EntryType
  title         String?
  originalText  String     @map("original_text") @db.Text
  editedText    String?    @map("edited_text") @db.Text
  audioFileName String     @map("audio_file_name")
  audioFileUrl  String     @map("audio_file_url")
  audioFileSize Int        @map("audio_file_size")
  audioDuration String     @map("audio_duration")
  language      String     @default("ko")
  confidence    Float?
  keywords      String[]   @default([])
  mood          Mood?
  completed     Boolean    @default(false)
  recordedAt    DateTime   @map("recorded_at")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // 관계
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("voice_entries")
}

model Goal {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  text             String
  completed        Boolean   @default(false)
  priority         Priority  @default(medium)
  category         String?
  estimatedMinutes Int?      @map("estimated_minutes")
  targetDate       DateTime  @map("target_date")
  completedAt      DateTime? @map("completed_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // 관계
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

// Token Usage Tracking
model TokenUsage {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  endpoint      String   // API endpoint (e.g., "transcribe", "goals/extract")
  model         String   // AI model used (e.g., "whisper-1", "gpt-4o-mini")
  inputTokens   Int      @map("input_tokens")
  outputTokens  Int      @map("output_tokens")
  totalTokens   Int      @map("total_tokens")
  cost          Float    // Estimated cost in USD
  metadata      Json?    // Additional metadata
  createdAt     DateTime @default(now()) @map("created_at")

  // 관계
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("token_usages")
}

// Notification Settings
model NotificationSettings {
  id                       String   @id @default(cuid())
  userId                   String   @unique @map("user_id")
  dailyReminderEnabled     Boolean  @default(true) @map("daily_reminder_enabled")
  dailyReminderTime        String   @default("20:00") @map("daily_reminder_time") // HH:mm format
  emailEnabled             Boolean  @default(true) @map("email_enabled")
  pushEnabled              Boolean  @default(false) @map("push_enabled")
  pushSubscription         Json?    @map("push_subscription") // Web Push API subscription
  timezone                 String   @default("Asia/Seoul")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  // 관계
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

// Notification Log
model NotificationLog {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  type      NotificationType
  channel   NotificationChannel
  subject   String?
  content   String           @db.Text
  status    NotificationStatus
  error     String?
  sentAt    DateTime?        @map("sent_at")
  createdAt DateTime         @default(now()) @map("created_at")

  // 관계
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("notification_logs")
}

// Enums
enum EntryType {
  plan
  reflection
  @@map("entry_type")
}

enum Mood {
  positive
  neutral
  negative
  @@map("mood")
}

enum Priority {
  low
  medium
  high
  @@map("priority")
}

enum NotificationType {
  plan_reminder
  reflection_reminder
  streak_alert
  goal_deadline
  weekly_report
  @@map("notification_type")
}

enum NotificationChannel {
  email
  push
  @@map("notification_channel")
}

enum NotificationStatus {
  pending
  sent
  failed
  @@map("notification_status")
}