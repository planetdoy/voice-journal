openapi: 3.0.3

info:
  title: "Voice Journal API"
  version: "1.0.0"
  description: |
    Voice Journal은 사용자가 매일 밤 내일의 계획을 음성으로 녹음하고,
    아침에 자신의 목소리로 들으며 동기부여를 받는 개인 성장 플랫폼입니다.
    
    주요 기능:
    - 음성 파일 업로드 및 OpenAI Whisper를 통한 텍스트 변환
    - 계획(plan)과 회고(reflection) 기록 관리
    - 목표 설정 및 달성률 추적
    
    이 API는 RESTful 설계 원칙을 따르며, JWT 기반 인증을 사용합니다.
  termsOfService: "https://voicejournal.com/terms"
  contact:
    name: "Voice Journal 지원팀"
    url: "https://voicejournal.com/support"
    email: "support@voicejournal.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"

servers:
  - url: "https://api.voicejournal.com"
    description: "Production server"
  - url: "https://staging-api.voicejournal.com"
    description: "Staging server"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT 토큰을 Authorization 헤더에 'Bearer {token}' 형식으로 포함"

  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: "HTTP 상태 코드"
          example: 400
        message:
          type: string
          description: "에러 메시지"
          example: "잘못된 요청입니다."
        details:
          type: string
          description: "상세 에러 정보 (선택적)"
          example: "filename 파라미터가 누락되었습니다."
        timestamp:
          type: string
          format: date-time
          description: "에러 발생 시간"
          example: "2024-01-15T10:30:00Z"
      required: [code, message, timestamp]

    User:
      type: object
      properties:
        id:
          type: string
          description: "사용자 고유 ID"
          example: "user_123456"
        name:
          type: string
          description: "사용자 이름"
          example: "김성장"
        email:
          type: string
          format: email
          description: "사용자 이메일"
          example: "growth@example.com"
        avatar:
          type: string
          format: uri
          description: "프로필 이미지 URL"
          example: "https://cdn.voicejournal.com/avatars/user123.jpg"
        joinDate:
          type: string
          format: date
          description: "가입일"
          example: "2024-01-15"
        emailVerified:
          type: boolean
          description: "이메일 인증 여부"
          example: true
      required: [id, name, email, joinDate, emailVerified]

    VoiceEntry:
      type: object
      properties:
        id:
          type: string
          description: "기록 고유 ID"
          example: "entry_789012"
        type:
          type: string
          enum: [plan, reflection]
          description: "기록 타입 (계획 또는 회고)"
          example: "plan"
        date:
          type: string
          format: date
          description: "기록 날짜"
          example: "2024-01-15"
        time:
          type: string
          pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
          description: "기록 시간 (HH:MM)"
          example: "21:30"
        duration:
          type: string
          pattern: "^[0-9]+:[0-5][0-9]$"
          description: "음성 길이 (MM:SS)"
          example: "2:45"
        text:
          type: string
          description: "AI로 변환된 텍스트"
          example: "내일은 아침 7시에 일어나서 운동을 30분 하고, 오전에는 프로젝트 기획서를 완성하겠습니다."
        audioUrl:
          type: string
          format: uri
          description: "음성 파일 URL"
          example: "https://cdn.voicejournal.com/audio/entry789012.mp3"
        fileName:
          type: string
          description: "원본 파일명"
          example: "morning_plan.mp3"
        fileSize:
          type: string
          description: "파일 크기"
          example: "2.1MB"
        language:
          type: string
          description: "감지된 언어"
          example: "ko"
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: "변환 신뢰도 (0-1)"
          example: 0.95
        summary:
          type: string
          description: "AI 생성 요약"
          example: "내일 아침 운동과 프로젝트 기획서 완성을 목표로 설정"
        completed:
          type: boolean
          description: "완료 여부"
          example: false
        createdAt:
          type: string
          format: date-time
          description: "생성 시간"
          example: "2024-01-15T21:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: "수정 시간"
          example: "2024-01-15T21:30:00Z"
      required: [id, type, date, time, duration, text, audioUrl, createdAt]

    DailyGoal:
      type: object
      properties:
        id:
          type: string
          description: "목표 고유 ID"
          example: "goal_345678"
        text:
          type: string
          description: "목표 내용"
          example: "아침 운동 30분"
        completed:
          type: boolean
          description: "완료 여부"
          example: true
        createdAt:
          type: string
          format: date-time
          description: "생성 시간"
          example: "2024-01-15T07:00:00Z"
        completedAt:
          type: string
          format: date-time
          description: "완료 시간"
          example: "2024-01-15T07:30:00Z"
      required: [id, text, completed, createdAt]

    TranscriptionRequest:
      type: object
      properties:
        audioUrl:
          type: string
          format: uri
          description: "변환할 음성 파일 URL"
          example: "https://cdn.voicejournal.com/temp/audio123.mp3"
        language:
          type: string
          description: "언어 코드 (선택적, 기본값: ko)"
          example: "ko"
      required: [audioUrl]

    TranscriptionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "변환 성공 여부"
          example: true
        text:
          type: string
          description: "변환된 텍스트"
          example: "내일은 아침 7시에 일어나서 운동을 하겠습니다."
        language:
          type: string
          description: "감지된 언어"
          example: "ko"
        duration:
          type: number
          format: float
          description: "음성 길이 (초)"
          example: 165.5
        confidence:
          type: number
          format: float
          description: "변환 신뢰도"
          example: 0.95
      required: [success, text]

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
          description: "액세스 토큰 (1시간 유효)"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: "리프레시 토큰 (30일 유효)"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          description: "액세스 토큰 만료 시간 (초)"
          example: 3600
        tokenType:
          type: string
          description: "토큰 타입"
          example: "Bearer"
      required: [accessToken, refreshToken, expiresIn, tokenType]

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          description: "현재 페이지"
          example: 1
        size:
          type: integer
          description: "페이지 크기"
          example: 10
        total:
          type: integer
          description: "전체 항목 수"
          example: 45
        totalPages:
          type: integer
          description: "전체 페이지 수"
          example: 5
        hasNext:
          type: boolean
          description: "다음 페이지 존재 여부"
          example: true
        hasPrev:
          type: boolean
          description: "이전 페이지 존재 여부"
          example: false
      required: [page, size, total, totalPages, hasNext, hasPrev]

    PaginatedVoiceEntries:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/VoiceEntry'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required: [data, pagination]

paths:
  # Authentication
  /api/v1/auth/signup:
    post:
      tags: ["Authentication"]
      summary: "회원가입"
      description: "새로운 사용자 계정을 생성합니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  description: "사용자 이름"
                  example: "김성장"
                email:
                  type: string
                  format: email
                  description: "이메일 주소"
                  example: "growth@example.com"
                password:
                  type: string
                  minLength: 8
                  description: "비밀번호 (최소 8자)"
                  example: "securePassword123!"
              required: [name, email, password]
      responses:
        '201':
          description: "회원가입 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "회원가입이 완료되었습니다. 이메일 인증을 진행해주세요."
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      tags: ["Authentication"]
      summary: "로그인"
      description: "이메일과 비밀번호로 로그인하여 JWT 토큰을 발급받습니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: "이메일 주소"
                  example: "growth@example.com"
                password:
                  type: string
                  description: "비밀번호"
                  example: "securePassword123!"
              required: [email, password]
      responses:
        '200':
          description: "로그인 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/refresh:
    post:
      tags: ["Authentication"]
      summary: "토큰 갱신"
      description: "리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급받습니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: "리프레시 토큰"
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              required: [refreshToken]
      responses:
        '200':
          description: "토큰 갱신 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  expiresIn:
                    type: integer
                    example: 3600
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # File Upload
  /api/v1/upload/presigned-url:
    get:
      tags: ["File Upload"]
      summary: "S3 Pre-signed URL 발급"
      description: "음성 파일 업로드를 위한 S3 pre-signed URL을 발급합니다."
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: filename
          required: true
          schema:
            type: string
            example: "morning_plan.mp3"
          description: "업로드할 파일명"
        - in: query
          name: contentType
          required: true
          schema:
            type: string
            example: "audio/mpeg"
          description: "파일 MIME 타입"
      responses:
        '200':
          description: "Pre-signed URL 발급 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadUrl:
                    type: string
                    format: uri
                    description: "업로드용 pre-signed URL"
                    example: "https://s3.amazonaws.com/voice-journal-bucket/audio/user123/20240115_213000.mp3?X-Amz-Algorithm=..."
                  fileUrl:
                    type: string
                    format: uri
                    description: "업로드 완료 후 접근 URL"
                    example: "https://cdn.voicejournal.com/audio/user123/20240115_213000.mp3"
                  expiresIn:
                    type: integer
                    description: "URL 만료 시간 (초)"
                    example: 3600
                required: [uploadUrl, fileUrl, expiresIn]
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    options:
      tags: ["File Upload"]
      summary: "CORS preflight for presigned URL"
      description: "CORS preflight 요청을 처리합니다."
      responses:
        '204':
          description: "CORS preflight 성공"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "GET, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"

  # Voice Processing
  /api/v1/transcribe:
    post:
      tags: ["Voice Processing"]
      summary: "음성 텍스트 변환"
      description: "OpenAI Whisper를 사용하여 음성 파일을 텍스트로 변환합니다."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranscriptionRequest'
      responses:
        '200':
          description: "변환 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranscriptionResponse'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    options:
      tags: ["Voice Processing"]
      summary: "CORS preflight for transcription"
      description: "CORS preflight 요청을 처리합니다."
      responses:
        '204':
          description: "CORS preflight 성공"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "POST, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"

  # Voice Entries
  /api/v1/voice-entries:
    post:
      tags: ["Voice Entries"]
      summary: "음성 기록 생성"
      description: "새로운 음성 기록을 생성합니다."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [plan, reflection]
                  description: "기록 타입"
                  example: "plan"
                text:
                  type: string
                  description: "변환된 텍스트"
                  example: "내일은 아침 7시에 일어나서 운동을 30분 하겠습니다."
                audioUrl:
                  type: string
                  format: uri
                  description: "음성 파일 URL"
                  example: "https://cdn.voicejournal.com/audio/user123/entry789.mp3"
                fileName:
                  type: string
                  description: "원본 파일명"
                  example: "morning_plan.mp3"
                fileSize:
                  type: string
                  description: "파일 크기"
                  example: "2.1MB"
                duration:
                  type: string
                  description: "음성 길이"
                  example: "2:45"
                language:
                  type: string
                  description: "언어 코드"
                  example: "ko"
                confidence:
                  type: number
                  format: float
                  description: "변환 신뢰도"
                  example: 0.95
              required: [type, text, audioUrl]
      responses:
        '201':
          description: "기록 생성 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoiceEntry'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: ["Voice Entries"]
      summary: "음성 기록 목록 조회"
      description: "사용자의 음성 기록 목록을 페이지네이션으로 조회합니다."
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: "페이지 번호"
          example: 1
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: "페이지 크기"
          example: 10
        - in: query
          name: type
          schema:
            type: string
            enum: [plan, reflection]
          description: "기록 타입 필터"
          example: "plan"
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: "시작 날짜 필터"
          example: "2024-01-01"
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: "종료 날짜 필터"
          example: "2024-01-31"
        - in: query
          name: sort
          schema:
            type: string
            enum: [newest, oldest]
            default: newest
          description: "정렬 순서"
          example: "newest"
      responses:
        '200':
          description: "목록 조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVoiceEntries'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    options:
      tags: ["Voice Entries"]
      summary: "CORS preflight for voice entries"
      description: "CORS preflight 요청을 처리합니다."
      responses:
        '204':
          description: "CORS preflight 성공"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "GET, POST, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"

  /api/v1/voice-entries/{entryId}:
    get:
      tags: ["Voice Entries"]
      summary: "음성 기록 상세 조회"
      description: "특정 음성 기록의 상세 정보를 조회합니다."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: entryId
          required: true
          schema:
            type: string
          description: "기록 ID"
          example: "entry_789012"
      responses:
        '200':
          description: "상세 조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoiceEntry'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: ["Voice Entries"]
      summary: "음성 기록 수정"
      description: "기존 음성 기록을 수정합니다."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: entryId
          required: true
          schema:
            type: string
          description: "기록 ID"
          example: "entry_789012"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: "수정된 텍스트"
                  example: "내일은 아침 7시에 일어나서 운동을 1시간 하겠습니다."
                completed:
                  type: boolean
                  description: "완료 여부"
                  example: true
      responses:
        '200':
          description: "수정 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoiceEntry'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: ["Voice Entries"]
      summary: "음성 기록 삭제"
      description: "특정 음성 기록을 삭제합니다."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: entryId
          required: true
          schema:
            type: string
          description: "기록 ID"
          example: "entry_789012"
      responses:
        '204':
          description: "삭제 성공"
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    options:
      tags: ["Voice Entries"]
      summary: "CORS preflight for voice entry operations"
      description: "CORS preflight 요청을 처리합니다."
      responses:
        '204':
          description: "CORS preflight 성공"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "GET, PUT, DELETE, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"

  # Goals
  /api/v1/goals:
    post:
      tags: ["Goals"]
      summary: "목표 생성"
      description: "새로운 일일 목표를 생성합니다."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  minLength: 1
                  maxLength: 200
                  description: "목표 내용"
                  example: "아침 운동 30분"
              required: [text]
      responses:
        '201':
          description: "목표 생성 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyGoal'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: ["Goals"]
      summary: "목표 목록 조회"
      description: "사용자의 목표 목록을 조회합니다."
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: "특정 날짜의 목표 조회 (기본값: 오늘)"
          example: "2024-01-15"
        - in: query
          name: completed
          schema:
            type: boolean
          description: "완료 여부 필터"
          example: false
      responses:
        '200':
          description: "목표 목록 조회 성공"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyGoal'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    options:
      tags: ["Goals"]
      summary: "CORS preflight for goals"
      description: "CORS preflight 요청을 처리합니다."
      responses:
        '204':
          description: "CORS preflight 성공"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "GET, POST, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"

  /api/v1/goals/{goalId}:
    put:
      tags: ["Goals"]
      summary: "목표 수정"
      description: "기존 목표를 수정합니다."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: goalId
          required: true
          schema:
            type: string
          description: "목표 ID"
          example: "goal_345678"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: "목표 내용"
                  example: "아침 운동 1시간"
                completed:
                  type: boolean
                  description: "완료 여부"
                  example: true
      responses:
        '200':
          description: "목표 수정 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DailyGoal'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: ["Goals"]
      summary: "목표 삭제"
      description: "특정 목표를 삭제합니다."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: goalId
          required: true
          schema:
            type: string
          description: "목표 ID"
          example: "goal_345678"
      responses:
        '204':
          description: "목표 삭제 성공"
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    options:
      tags: ["Goals"]
      summary: "CORS preflight for goal operations"
      description: "CORS preflight 요청을 처리합니다."
      responses:
        '204':
          description: "CORS preflight 성공"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "PUT, DELETE, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"

  # User Profile
  /api/v1/users/profile:
    get:
      tags: ["User Profile"]
      summary: "프로필 조회"
      description: "현재 사용자의 프로필 정보를 조회합니다."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "프로필 조회 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: ["User Profile"]
      summary: "프로필 수정"
      description: "사용자 프로필 정보를 수정합니다."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 50
                  description: "사용자 이름"
                  example: "김성장"
                avatar:
                  type: string
                  format: uri
                  description: "프로필 이미지 URL"
                  example: "https://cdn.voicejournal.com/avatars/user123.jpg"
      responses:
        '200':
          description: "프로필 수정 성공"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    options:
      tags: ["User Profile"]
      summary: "CORS preflight for profile"
      description: "CORS preflight 요청을 처리합니다."
      responses:
        '204':
          description: "CORS preflight 성공"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "GET, PUT, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"

  /api/v1/users/password:
    put:
      tags: ["User Profile"]
      summary: "비밀번호 변경"
      description: "사용자 비밀번호를 변경합니다."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  description: "현재 비밀번호"
                  example: "currentPassword123!"
                newPassword:
                  type: string
                  minLength: 8
                  description: "새 비밀번호 (최소 8자)"
                  example: "newPassword123!"
              required: [currentPassword, newPassword]
      responses:
        '200':
          description: "비밀번호 변경 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "비밀번호가 성공적으로 변경되었습니다."
        '400':
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: "리소스를 찾을 수 없음"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: "요청 한도 초과"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: "서버 내부 오류"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    options:
      tags: ["User Profile"]
      summary: "CORS preflight for password change"
      description: "CORS preflight 요청을 처리합니다."
      responses:
        '204':
          description: "CORS preflight 성공"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "PUT, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"

tags:
  - name: "Authentication"
    description: "사용자 인증 관련 API"
  - name: "File Upload"
    description: "파일 업로드 관련 API"
  - name: "Voice Processing"
    description: "음성 처리 관련 API"
  - name: "Voice Entries"
    description: "음성 기록 관리 API"
  - name: "Goals"
    description: "목표 관리 API"
  - name: "User Profile"
    description: "사용자 프로필 관리 API"
